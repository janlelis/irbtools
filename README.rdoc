= irbtools

Improvements fro Ruby's IRB console. Everything is colorful and you will get lots of console helpers. Unlike with PRY, you are still in your normal IRB. It is designed to work out-of-the-box so there is no reason to not use it!


== Setup

  $ gem install irbtools

* On Linux, you will need +xclip+ or +xsel+ for a functional clipboard: <tt>sudo apt-get install xclip</tt>
* On Windows, you will need ansicon[https://github.com/adoxa/ansicon] to enable ANSI colors
* On Mac OS, you will need growl, to use the +g+ gem


== Usage

To use *irbtools*, put the following in your <tt>~/.irbrc</tt> file (it is loaded every time you start irb):

  require 'irbtools'

If the file does not exist, just create a new one. See further below on how to customize loaded libraries.


=== Rails/Bundler Notes

To integrate *irbtools* into a Rails console, you should <tt>irbtools</tt> to your Gemfile:

  gem 'irbtools', require: 'binding.repl'

Thanks to help from the {binding.repl}[https://github.com/rpag/binding.repl] gem, you can start IRB (with *irbtools*) directly from your code:

  binding.repl!

=== Debundle

Another way to activate *irbtools* in bundler projects is to add a {debundle hack}[https://github.com/janlelis/debundle.rb] at the beginning of your <tt>~/.irbrc</tt> file.


=== This is irbtools Light

When installing *irbtools*, some gems will not be installed to ensure Windows OS support, e.g. the bond gem for better auto-completion or the looksee gem. These are packaged into the {irbtools-more}[https://github.com/janlelis/irbtools-more] gem. To use <tt>irbtools-more</tt>, you will need to change your <tt>.irbrc</tt> to:

  require 'irbtools/more'


=== Included Gems and Libraries

[wirb[https://github.com/janlelis/wirb/]]                  Colorizes Ruby objects
[hirb[http://tagaholic.me/2009/03/13/hirb-irb-on-the-good-stuff.html]]
                                                           Custom views for specific objects, e.g. tables for ActiveRecord
[fancy_irb[https://github.com/janlelis/fancy_irb]]         Hash rockets and colorful error messages
[every_day_irb[https://github.com/janlelis/irbtools/tree/master/lib/every_day_irb.rb]]
                                                           Contains helper methods that might be useful in every-day irb usage, see below for details
[clipboard[http://github.com/janlelis/clipboard]]          Easy clipboard access
[interactive_editor[https://github.com/jberkel/interactive_editor]]
                                                           Lets you open vim (or emacs) from within IRB to hack something that gets loaded into the current session
[debugging[https:/github.com/janlelis/debugging]]          Print debugging helpers (<tt>q</tt>, <tt>mof</tt>, <tt>re</tt>)
[ap[https://github.com/michaeldv/awesome_print]]           More print debugging (<tt>ap</tt>)
[ruby_version[https://github.com/janlelis/ruby_version]]   <tt>version</tt>
[ruby_engine[https://github.com/janlelis/ruby_engine]]     <tt>engine</tt>
[os[https://github.com/rdp/os]]                            <tt>os</tt>
[ruby_info[https://github.com/janlelis/ruby_info]]         <tt>info</tt>
[coderay[http://coderay.rubychan.de/]]                     Colorizes Ruby code (<tt>colorize</tt>, <tt>ray</tt>)
[methodfinder[https://github.com/citizen428/methodfinder]] malltalk like method finder for Ruby (<tt>mf</tt>)
[ori[https://github.com/dadooda/ori]]                      <tt>Object#ri</tt>
[method_locator[https://github.com/ryanlecompte/method_locator]] Provides <tt>Object#mlp</tt> (improved version of <tt>Module#ancestors</tt>) and <tt>Object#methods_for(m)</tt> (get this method from all ancestors)
[method_source[https://github.com/banister/method_source]] <tt>Object#src</tt> can be shown for Ruby methods
[alias[http://tagaholic.me/2009/07/07/alias-quickness-in-the-ruby-console.html]] Easily create shortcuts for your favorite methods, even when they are nested, saved in personal yaml file
[boson[http://tagaholic.me/boson/]]                        Command/task framework similar to rake and thor that opens your ruby universe to the commandline and irb
[bond[http://tagaholic.me/bond/]]                          <b>irbtools-more:</b> Better IRB tab-completion
[looksee[https://github.com/oggy/looksee]]                 <b>irbtools-more:</b> Great lookup path inspector: <tt>Object#l</tt> (Extended version of <tt>mof</tt>), also provides the ability to <tt>Object#edit</tt> methods.
[*fileutils* (stdlib)]                                     System utility methods: <tt>cd</tt>, <tt>pwd</tt>, <tt>ln_s</tt>, <tt>mv</tt>, <tt>rm</tt>, <tt>mkdir</tt>, <tt>touch</tt>


=== irbtools Methods (every_day_irb)

[ls]     Returns an array with the directory's content
[cat]    Shortcut for <tt>File.read</tt>
[rq]     Shortcut for <tt>require library.to_s</tt> (allows concise syntax like <tt>rq:mathn</tt>)
[ld]     Shortcut for <tt>load library.to_s + '.rb'</tt>
[rrq/rerequire] Little hack for rerequiring a library (it's really hack and not reliable, but works in most cases)
[reset!] Restarts IRB
[clear]  Clears the terminal (<tt>system "clear"</tt>)
[session_history] Returns all issued commands as a string

irbtools also defines custom helper methods in combination with the loaded gems:

[cd]     Improves the cd that is already provided by *FileUtils* (try <tt>cd '-'</tt>)
[version]Displays RubyVersion
[engine] Displays RubyEngine
[os]     OS information
[info]   Aggregates information about your Ruby environment
[colorize] Syntax highlights a ruby string using *CodeRay*
[ray]    Syntax highlights a ruby file using *CodeRay*
[copy]   Shortcut for <tt>Clipboard.copy</tt>
[paste]  Shortcut for <tt>Clipboard.paste</tt>
[copy_input]  Copies the session_history to the clipboard
[copy_output] Copies this session's results to the clipboard
[mf]     Shortcut for using the *methodfinder*
[page]   Shortcut for using the pager from *hirb*

These are the custom public +Object+ methods renamed/patched for some gems

[ri]     Patching the +ri+ provided by *ori* to also allow default ri syntax on toplevel
[src]    Shortcut for displaying the method source using *method_source* and *coderay*
[l/lp]   Alternative method name to trigger the *looksee* gem (<b>irbtools-more</b>)


== Advanced tweaking
=== How to load more or less libraries

It is possible to modify, which libraries should get loaded:

  # Don't require 'irbtools', but:
  require 'irbtools/configure'
  # Here you can modify the libraries using the methods below
  Irbtools.start

If you do not want to load the default set of irbtools gems, you will have to use <tt>require 'irbtools/minimal'</tt> instead of <tt>configure</tt>.

You can use the following methods:

* <tt>Irbtools.add_library(lib, options_hash, &block)</tt>
* <tt>Irbtools.remove_library(lib)</tt>

The <tt>options_hash</tt> defines the way in which irbtools loads the library. The following options are possible
[(no options)/<tt>:start</tt>] The library is required on startup before doing anything else (before displaying the prompt)
[<tt>:thread => identifier</tt>] After loading everything else, the library is required in a thread (while continuing loading). You can choose any identifier, but if you take the same one for multiple libraries, they will be loaded in the same thread (in the order that you define)
[<tt>:late => true</tt>] The library is required just before showing the prompt (note: loading threads might still be in process)
[<tt>:late_thread => identifier</tt>] Same as <tt>:thread</tt>, but after loading late libraries.
[<tt>:sub_session => true</tt>] The library is loaded every time a sub-session starts (using <tt>IRB.conf[:IRB_RC]</tt>). In ripl[https://github.com/cldwalker/ripl], <tt>ripl-after_rc</tt> is used.
[<tt>:autoload => :Constant</tt>] Use Ruby's <tt>autoload</tt> feature. It loads the library as soon as the constant is encountered.

You can pass a block as third argument, which gets executed after the library has completed loading (except for <tt>:autoload</tt>, in which case the code will executed directly on startup). You can modify the callbacks by using <tt>Irbtools.add_library_callback</tt> and <tt>Irbtools.replace_library_callback</tt>.

When adding a new library, you should firstly consider some way to load it via <tt>:autoload</tt>.
If this is not possible, try loading via <tt>:thread</tt>. If that is not possible either, you will need to fallback to the default loading mechanism.


== Troubleshooting: Unicode causes wrong display widths?

If you use double-width unicode characterss, you will need to paste the following snippet to your <tt>.irbrc</tt> file.

  Irbtools.replace_library_callback :fancy_irb do
    FancyIrb.start east_asian_width: true
  end

This setting is deactivated by default, because of performance issues.


== Hint: Faster start-up

You can get an about a second faster start-up time by changing the loading methods for wirb and fancy_irb to <tt>:thread</tt> (drawback: the hash rocket will not be used for the first result):

  require 'irbtools/configure'
  Irbtools.remove_library :paint
  Irbtools.remove_library :fancy_irb
  Irbtools.add_library :paint, :late => true do Wirb.load_schema :classic_paint if defined? Wirb end
  Irbtools.add_library :fancy_irb, :thread => -1 do FancyIrb.start end
  Irbtools.start


== Welcome Message

The welcome message can be customized with <tt>Irbtools.welcome_message=</tt>


== Web Console

Irbtools works well together with the amazing {web-console!}[https://github.com/rails/web-console]


== J-_-L

Copyright (c) 2010-2014 Jan Lelis <http://janlelis.de> released under the MIT license.
